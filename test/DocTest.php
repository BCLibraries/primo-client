<?php

namespace BCLib\PrimoClient;

use BCLib\PrimoClient\Exceptions\InvalidArgumentException;
use PHPUnit\Framework\TestCase;

/** @covers \BCLib\PrimoClient\Doc */
class DocTest extends TestCase
{
    protected Doc $doc;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $json = file_get_contents(__DIR__ . '/doc-supreme+court.json');
        $this->doc = new Doc(json_decode($json, false));
    }

    public function testCallingInvalidPNXCategoryThrowsException(): void
    {
        $this->expectException(InvalidArgumentException::class);
        $this->doc->pnx('foo', 'bar');
    }

    public function testCallingUnsetPNXReturnsEmptyArray(): void
    {
        $this->assertEquals([], $this->doc->pnx('display', 'lds31'));
    }

    public function testCallingMultiItemPNXFieldReturnsKeyedArray(): void
    {
        $expected = [
            'ALMA-BC21331257940001021' => '01BC_INST:21331257940001021',
            'ALMA-BC51460206020001021' => '01BC_INST:51460206020001021',
            'ALMA-BC51421060810001021' => '01BC_INST:51421060810001021',
            'ALMA-BC51502186130001021' => '01BC_INST:51502186130001021'
        ];
        $this->assertEquals($expected, $this->doc->pnx('control', 'almaid'));
    }

    public function testCustomPNXFieldReturned(): void
    {
        $this->assertEquals(['little brown and company'], $this->doc->pnx('dedup', 'f10'));
    }

    public function testPCIRecordsWork(): void
    {
        $json = file_get_contents(__DIR__ . '/doc-pci-otters.json');
        $doc = new Doc(json_decode($json, false));
        $this->assertTrue(true);
    }

    /**
     * @covers Doc::setId
     * @covers Doc::getId
     */
    public function testGetAndSetId(): void
    {
        $this->assertEquals(null, $this->doc->getId());
        $this->doc->setId('foo');
        $this->assertEquals('foo', $this->doc->getId());
    }

    /**
     * @covers Doc::setTitle
     * @covers Doc::getTitle
     */
    public function testGetAndSetTitle(): void
    {
        $this->assertEquals(null, $this->doc->getTitle());
        $this->doc->setTitle('foo');
        $this->assertEquals('foo', $this->doc->getTitle());
    }

    /**
     * @covers Doc::setCreator
     * @covers Doc::getCreator
     */
    public function testGetAndSetCreator(): void
    {
        $this->assertEquals(null, $this->doc->getCreator());
        $this->doc->setCreator('foo');
        $this->assertEquals('foo', $this->doc->getCreator());
    }

    /**
     * @covers Doc::setContributors
     * @covers Doc::getContributors
     */
    public function testGetAndSetContributors(): void
    {
        $this->assertEquals([], $this->doc->getContributors());
        $this->doc->setContributors(['foo']);
        $this->assertEquals(['foo'], $this->doc->getContributors());
    }

    /**
     * @covers Doc::setDate
     * @covers Doc::getDate
     */
    public function testGetAndSetDate(): void
    {
        $this->assertEquals(null, $this->doc->getDate());
        $this->doc->setDate('foo');
        $this->assertEquals('foo', $this->doc->getDate());
    }

    /**
     * @covers Doc::setPublisher
     * @covers Doc::getPublisher
     */
    public function testGetAndSetPublisher(): void
    {
        $this->assertEquals(null, $this->doc->getPublisher());
        $this->doc->setPublisher('foo');
        $this->assertEquals('foo', $this->doc->getPublisher());
    }

    /**
     * @covers Doc::setAbstract
     * @covers Doc::getAbstract
     */
    public function testGetAndSetAbstract(): void
    {
        $this->assertEquals(null, $this->doc->getAbstract());
        $this->doc->setAbstract('foo');
        $this->assertEquals('foo', $this->doc->getAbstract());
    }

    /**
     * @covers Doc::setType
     * @covers Doc::getType
     */
    public function testGetAndSetType(): void
    {
        $this->assertEquals(null, $this->doc->getType());
        $this->doc->setType('foo');
        $this->assertEquals('foo', $this->doc->getType());
    }

    /**
     * @covers Doc::setIsbn
     * @covers Doc::getIsbn
     */
    public function testGetAndSetIsbn(): void
    {
        $this->assertEquals([], $this->doc->getIsbn());
        $this->doc->setIsbn(['foo']);
        $this->assertEquals(['foo'], $this->doc->getIsbn());
    }

    /**
     * @covers Doc::setIssn
     * @covers Doc::getIssn
     */
    public function testGetAndSetIssn(): void
    {
        $this->assertEquals([], $this->doc->getIssn());
        $this->doc->setIssn(['foo']);
        $this->assertEquals(['foo'], $this->doc->getIssn());
    }

    /**
     * @covers Doc::setOclcid
     * @covers Doc::getOclcid
     */
    public function testGetAndSetOclcid(): void
    {
        $this->assertEquals([], $this->doc->getOclcid());
        $this->doc->setOclcid(['foo']);
        $this->assertEquals(['foo'], $this->doc->getOclcid());
    }

    /**
     * @covers Doc::setDisplaySubject
     * @covers Doc::getDisplaySubject
     */
    public function testGetAndSetDisplaySubject(): void
    {
        $this->assertEquals(null, $this->doc->getDisplaySubject());
        $this->doc->setDisplaySubject('foo');
        $this->assertEquals('foo', $this->doc->getDisplaySubject());
    }

    /**
     * @covers Doc::setGenres
     * @covers Doc::getGenres
     */
    public function testGetAndSetGenres(): void
    {
        $this->assertEquals([], $this->doc->getGenres());
        $this->doc->setGenres(['foo']);
        $this->assertEquals(['foo'], $this->doc->getGenres());
    }

    /**
     * @covers Doc::setCreatorFacet
     * @covers Doc::getCreatorFacet
     */
    public function testGetAndSetCreatorFacet(): void
    {
        $this->assertEquals([], $this->doc->getCreatorFacet());
        $this->doc->setCreatorFacet(['foo']);
        $this->assertEquals(['foo'], $this->doc->getCreatorFacet());
    }

    /**
     * @covers Doc::setCollectionFacet
     * @covers Doc::getCollectionFacet
     */
    public function testGetAndSetCollectionFacet(): void
    {
        $this->assertEquals([], $this->doc->getCollectionFacet());
        $this->doc->setCollectionFacet(['foo']);
        $this->assertEquals(['foo'], $this->doc->getCollectionFacet());
    }

    /**
     * @covers Doc::setResourcetypeFacet
     * @covers Doc::getResourcetypeFacet
     */
    public function testGetAndSetResourcetypeFacet(): void
    {
        $this->assertEquals([], $this->doc->getResourcetypeFacet());
        $this->doc->setResourcetypeFacet(['foo']);
        $this->assertEquals(['foo'], $this->doc->getResourcetypeFacet());
    }

    /**
     * @covers Doc::setLanguages
     * @covers Doc::getLanguages
     */
    public function testGetAndSetLanguages(): void
    {
        $this->assertEquals([], $this->doc->getLanguages());
        $this->doc->setLanguages(['foo']);
        $this->assertEquals(['foo'], $this->doc->getLanguages());
    }

    /**
     * @covers Doc::setFormat
     * @covers Doc::getFormat
     */
    public function testGetAndSetFormat(): void
    {
        $this->assertEquals(null, $this->doc->getFormat());
        $this->doc->setFormat('foo');
        $this->assertEquals('foo', $this->doc->getFormat());
    }

    /**
     * @covers Doc::setDescription
     * @covers Doc::getDescription
     */
    public function testGetAndSetDescription(): void
    {
        $this->assertEquals([], $this->doc->getDescription());
        $this->doc->setDescription(['foo']);
        $this->assertEquals(['foo'], $this->doc->getDescription());
    }

    /**
     * @covers Doc::setFrbrGroupId
     * @covers Doc::getFrbrGroupId
     */
    public function testGetAndSetFrbrGroupId(): void
    {
        $this->assertEquals(null, $this->doc->getFrbrGroupId());
        $this->doc->setFrbrGroupId('foo');
        $this->assertEquals('foo', $this->doc->getFrbrGroupId());
    }

    /**
     * @covers Doc::setCoverImages
     * @covers Doc::getCoverImages
     */
    public function testGetAndSetCoverImages(): void
    {
        $this->assertEquals([], $this->doc->getCoverImages());
        $this->doc->setCoverImages(['foo']);
        $this->assertEquals(['foo'], $this->doc->getCoverImages());
    }

    /**
     * @covers Doc::setOpenurl
     * @covers Doc::getOpenurl
     */
    public function testGetAndSetOpenurl(): void
    {
        $link = $this->createMock(Link::class);
        $this->assertEquals([], $this->doc->getOpenurl());
        $this->doc->setOpenurl([$link]);
        $this->assertEquals([$link], $this->doc->getOpenurl());
    }

    /**
     * @covers Doc::setOpenurlFulltext
     * @covers Doc::getOpenurlFulltext
     */
    public function testGetAndSetOpenurlFulltext(): void
    {
        $link = $this->createMock(Link::class);
        $this->assertEquals([], $this->doc->getOpenurlFulltext());
        $this->doc->setOpenurlFulltext([$link]);
        $this->assertEquals([$link], $this->doc->getOpenurlFulltext());
    }

    /**
     * @covers Doc::setSortTitle
     * @covers Doc::getSortTitle
     */
    public function testGetAndSetSortTitle(): void
    {
        $this->assertEquals(null, $this->doc->getSortTitle());
        $this->doc->setSortTitle('foo');
        $this->assertEquals('foo', $this->doc->getSortTitle());
    }

    /**
     * @covers Doc::setSortCreator
     * @covers Doc::getSortCreator
     */
    public function testGetAndSetSortCreator(): void
    {
        $this->assertEquals(null, $this->doc->getSortCreator());
        $this->doc->setSortCreator('foo');
        $this->assertEquals('foo', $this->doc->getSortCreator());
    }

    /**
     * @covers Doc::setIsElectronic
     * @covers Doc::isElectronic
     */
    public function testGetAndSetIsPhysical(): void
    {
        $this->assertEquals(false, $this->doc->isPhysical());
        $this->doc->setIsPhysical(true);
        $this->assertEquals(true, $this->doc->isPhysical());
    }

    /**
     * @covers Doc::setIsDigital
     * @covers Doc::isDigital
     */
    public function testGetAndSetIsDigital(): void
    {
        $this->assertEquals(false, $this->doc->isDigital());
        $this->doc->setIsDigital(true);
        $this->assertEquals(true, $this->doc->isDigital());
    }

    /**
     * @covers Doc::setLinks
     * @covers Doc::getLinks
     */
    public function testGetAndSetLinks(): void
    {
        $this->assertEquals([], $this->doc->getLinks());
        $this->doc->setLinks(['foo']);
        $this->assertEquals(['foo'], $this->doc->getLinks());
    }

    /**
     * @covers Doc::setHoldings
     * @covers Doc::getHoldings
     */
    public function testGetAndSetHoldings(): void
    {
        $holding = $this->createMock(Holding::class);
        $this->assertEquals([], $this->doc->getHoldings());
        $this->doc->setHoldings([$holding]);
        $this->assertEquals([$holding], $this->doc->getHoldings());
    }

    /**
     * @covers Doc::setTopLevelFacets
     * @covers Doc::getTopLevelFacets
     */
    public function testGetAndSetTopLevelFacets(): void
    {
        $top_level = ['available', 'online_resource'];
        $this->assertEquals([], $this->doc->getTopLevelFacets());
        $this->doc->setTopLevelFacets($top_level);
        $this->assertEquals($top_level, $this->doc->top_level_facets);
    }

    /**
     * @covers Doc::isPeerReviewed
     */
    public function testIsPeerReviewed(): void
    {
        $top_level_without_peer_review = ['available', 'online_resource'];
        $this->doc->setTopLevelFacets($top_level_without_peer_review);
        $this->assertFalse($this->doc->is_peer_reviewed);

        $top_level_with_peer_review = ['peer_reviewed', 'online_resource'];
        $this->doc->setTopLevelFacets($top_level_with_peer_review);
        $this->assertTrue($this->doc->is_peer_reviewed);
    }

    /**
     * @covers Doc::isOnlineResource
     */
    public function testIsOnlineResource(): void
    {
        $top_level_not_online_resource = ['available'];
        $this->doc->setTopLevelFacets($top_level_not_online_resource);
        $this->assertFalse($this->doc->is_online_resource);

        $top_level_is_online_resource = ['peer_reviewed', 'online_resources'];
        $this->doc->setTopLevelFacets($top_level_is_online_resource);
        $this->assertTrue($this->doc->is_online_resource);
    }

    /**
     * @covers Doc::setSourceType
     * @covers Doc::getSourceType
     */
    public function testGetAndSetSourceType(): void
    {
        $source_type = ['Aggregation Database'];
        $this->assertEquals([], $this->doc->getSourceType());
        $this->doc->setSourceType($source_type);
        $this->assertEquals($source_type, $this->doc->getSourceType());
    }

    /**
     * @covers Doc::isOpenAccess()
     */
    public function testIsOpenAccess(): void
    {
        $source_type = ['Aggregation Database'];
        $this->doc->setSourceType($source_type);
        $this->assertFalse($this->doc->is_open_access);

        $source_type = ['Open Access Repository'];
        $this->doc->setSourceType($source_type);
        $this->assertTrue($this->doc->is_open_access);
    }

    public function testAddingNonHoldingToHoldingsThrowsException(): void
    {
        $holding = $this->createMock(Holding::class);
        $this->expectException(InvalidArgumentException::class);
        $this->doc->setHoldings([$holding, $holding, 'not a holding', $holding]);
    }
}
